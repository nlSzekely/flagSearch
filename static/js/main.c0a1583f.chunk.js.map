{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","FlagApp.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","src","flag","alt","name","CardList","countries","map","item","index","key","SearchBox","type","placeholder","onChange","RoboApp","onSearch","event","setState","searchText","target","value","state","fetch","then","response","json","filtered","this","filter","toLowerCase","includes","style","margin","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCFSC,G,MAbF,SAACC,GACV,OACI,yBAAKC,UAAU,SACX,6BACA,yBAAKA,UAAU,WAAWC,IAAKF,EAAMG,KAAMC,IAAI,UAE/C,yBAAKH,UAAU,aACX,4BAAKD,EAAMK,UCKZC,G,MAXE,SAAC,GAAe,IAAdC,EAAa,EAAbA,UACf,OACI,yBAAKN,UAAU,aACTM,EAAUC,KAAI,SAACC,EAAKC,GACd,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAOP,KAAMM,EAAKN,KAAME,KAAMI,EAAKJ,aCM1DO,G,MAXG,SAAC,GAAW,IAAVZ,EAAS,EAATA,MAChB,OACI,6BACI,2BAAOa,KAAK,OACZC,YAAY,cACZC,SAAUf,OCoCPgB,G,kBAvCX,WAAYhB,GAAO,IAAD,8BACd,4CAAMA,KAiBViB,SAAW,SAACC,GACR,EAAKC,SAAS,CACVC,WAAYF,EAAMG,OAAOC,SAlB7B,EAAKC,MAAQ,CACThB,UAAW,IAHD,E,iFAOE,IAAD,OACfiB,MAAM,wCAAwCC,MAAK,SAAAC,GAC/C,OAAOA,EAASC,UACjBF,MAAK,SAAAlB,GACJ,EAAKY,SAAS,CACVZ,UAAWA,EACXa,WAAY,U,+BAUf,IAAD,OACEQ,EAAWC,KAAKN,MAAMhB,UAAUuB,QAAO,SAACrB,GAC1C,OAAOA,EAAKJ,KAAK0B,cAAcC,SAAS,EAAKT,MAAMH,WAAWW,kBAElE,OACI,yBAAK9B,UAAU,aACX,yBAAKA,UAAU,UACX,wBAAIgC,MAAO,CAACC,OAAO,IAAnB,eACA,kBAAC,EAAD,CAAWlC,MAAO6B,KAAKZ,YAE3B,kBAAC,EAAD,CAAUV,UAAaqB,S,GAlCjBO,IAAMC,YCE5BC,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,SL2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.c0a1583f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = (props)=>{\r\n    return(\r\n        <div className='card '>\r\n            <div>\r\n            <img className='card-img' src={props.flag} alt='Flag' />\r\n            </div>\r\n            <div className='card-info'>\r\n                <h3>{props.name}</h3>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport './CardList.css';\r\n\r\nconst CardList = ({countries})=>{\r\n    return(\r\n        <div className='card-list'>\r\n            { countries.map((item,index)=>{\r\n                    return <Card key={index} flag={item.flag} name={item.name} />\r\n            })}\r\n        </div>\r\n       \r\n    );    \r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.css'\r\n\r\nconst SearchBox = ({props})=>{\r\n    return(\r\n        <div>\r\n            <input type='text'\r\n            placeholder='Search flag'\r\n            onChange={props}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport './FlagApp.css';\r\nclass RoboApp extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            countries: []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://restcountries.eu/rest/v2/all').then(response=>{\r\n            return response.json()\r\n        }).then(countries=>{\r\n            this.setState({\r\n                countries: countries,\r\n                searchText: ''\r\n            })\r\n        })\r\n    }\r\n\r\n    onSearch = (event)=>{\r\n        this.setState({\r\n            searchText: event.target.value\r\n        })\r\n    }\r\n    render(){\r\n        const filtered = this.state.countries.filter((item)=>{\r\n            return item.name.toLowerCase().includes(this.state.searchText.toLowerCase())\r\n        })\r\n        return(\r\n            <div className='container'>\r\n                <div className='header'>\r\n                    <h1 style={{margin:0}}>Flag Search</h1>\r\n                    <SearchBox props={this.onSearch}/>\r\n                </div>\r\n                <CardList countries = {filtered}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RoboApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css'\nimport FlagApp from './FlagApp';\n\nReactDOM.render(<FlagApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}